import{a7 as p,Y as u,a8 as w,a1 as m,a4 as h,u as T,a9 as I,H as q,a2 as E,Z as P,n as _,v as D,aa as A}from"./index-CrUjKI9_.js";function g(n){const e=p(n);if(!e)throw new Error(`No injected provider found for wallet: "${n}"`);return e}async function H(n,e,c){const a=g(n),r=(await a.request({method:"eth_requestAccounts"}))[0];if(!r)throw new Error("no accounts available");const t=u(r),s=await a.request({method:"eth_chainId"}).then(w);let o=e.chain&&e.chain.id===s?e.chain:m(s);return e.chain&&e.chain.id!==s&&(await C(a,e.chain),o=e.chain),y(a,t,o,c)}async function b(n,e,c){const a=g(n),r=(await a.request({method:"eth_accounts"}))[0];if(!r)throw new Error("no accounts available");const t=u(r),s=await a.request({method:"eth_chainId"}).then(w),o=c&&c.id===s?c:m(s);return y(a,t,o,e)}function f(n,e){const c={address:u(e),async sendTransaction(a){return{transactionHash:await n.request({method:"eth_sendTransaction",params:[{accessList:a.accessList,value:a.value?h(a.value):void 0,gas:a.gas?h(a.gas):void 0,gasPrice:a.gasPrice?h(a.gasPrice):void 0,from:this.address,to:a.to,data:a.data}]})}},async signMessage({message:a}){if(!c.address)throw new Error("Provider not setup");const i=typeof a=="string"?q(a):a.raw instanceof Uint8Array?E(a.raw):a.raw;return await n.request({method:"personal_sign",params:[i,c.address]})},async signTypedData(a){if(!n||!c.address)throw new Error("Provider not setup");const i=P(a),{domain:r,message:t,primaryType:s}=i,o={EIP712Domain:_({domain:r}),...i.types};D({domain:r,message:t,primaryType:s,types:o});const d=A({domain:r??{},message:t,primaryType:s,types:o});return await n.request({method:"eth_signTypedData_v4",params:[c.address,d]})},async watchAsset(a){return await n.request({method:"wallet_watchAsset",params:a},{retryCount:0})}};return c}async function y(n,e,c,a){const i=f(n,e);async function r(){n.removeListener("accountsChanged",s),n.removeListener("chainChanged",o),n.removeListener("disconnect",t)}async function t(){r(),a.emit("disconnect",void 0)}function s(d){if(d[0]){const l=f(n,u(d[0]));a.emit("accountChanged",l),a.emit("accountsChanged",d)}else t()}function o(d){const l=m(w(d));a.emit("chainChanged",l)}return n.on&&(n.on("accountsChanged",s),n.on("chainChanged",o),n.on("disconnect",t)),[i,c,t,d=>C(n,d)]}async function C(n,e){var a,i,r;const c=h(e.id);try{await n.request({method:"wallet_switchEthereumChain",params:[{chainId:c}]})}catch(t){if((t==null?void 0:t.code)===4902||((i=(a=t==null?void 0:t.data)==null?void 0:a.originalError)==null?void 0:i.code)===4902){const s=await T(e);await n.request({method:"wallet_addEthereumChain",params:[{chainId:c,chainName:s.name,nativeCurrency:s.nativeCurrency,rpcUrls:I(s),blockExplorerUrls:(r=s.explorers)==null?void 0:r.map(o=>o.url)}]})}else throw t}}export{b as autoConnectInjectedWallet,H as connectInjectedWallet,g as getInjectedProvider};
