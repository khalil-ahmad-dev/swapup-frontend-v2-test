import { cn } from "@/lib/utils";
import { SUT_ToastVariantType } from "@/types/global.types";

interface IProp {
  variant?: SUT_ToastVariantType;
  icon?: React.ReactNode;
  title?: string;
  subtitle?: string;
  description?: any;
  descriptionClasses?: string;
  className?: string;
  hideCloseButton?: boolean;
  onClose?: () => string | number;
}

const ToastLookCard = ({ variant = "default", title, description, icon, subtitle, className, descriptionClasses, onClose, hideCloseButton = false, ...props }: IProp) => {

  const getDefaultIcon = () => {

    if (variant === "success") return (
      <svg className="w-4.5" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M7.83335 12.8333L13.7084 6.95832L12.5417 5.79166L7.83335 10.5L5.45835 8.12499L4.29169 9.29166L7.83335 12.8333ZM9.00002 17.3333C7.84724 17.3333 6.76391 17.1144 5.75002 16.6767C4.73613 16.2389 3.85419 15.6453 3.10419 14.8958C2.35419 14.1464 1.76058 13.2644 1.32335 12.25C0.886133 11.2355 0.667244 10.1522 0.666688 8.99999C0.666133 7.84777 0.885021 6.76443 1.32335 5.74999C1.76169 4.73555 2.3553 3.8536 3.10419 3.10416C3.85308 2.35471 4.73502 1.7611 5.75002 1.32332C6.76502 0.885545 7.84835 0.666656 9.00002 0.666656C10.1517 0.666656 11.235 0.885545 12.25 1.32332C13.265 1.7611 14.147 2.35471 14.8959 3.10416C15.6447 3.8536 16.2386 4.73555 16.6775 5.74999C17.1164 6.76443 17.335 7.84777 17.3334 8.99999C17.3317 10.1522 17.1128 11.2355 16.6767 12.25C16.2406 13.2644 15.647 14.1464 14.8959 14.8958C14.1447 15.6453 13.2628 16.2392 12.25 16.6775C11.2372 17.1158 10.1539 17.3344 9.00002 17.3333Z" fill="#75FFC1" />
      </svg>
    );

    else if (variant === "info") return (
      <svg className="w-4.5" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9.00002 4.83331C9.23613 4.83331 9.43419 4.91331 9.59419 5.07331C9.75419 5.23331 9.83391 5.43109 9.83335 5.66665C9.8328 5.9022 9.7528 6.09998 9.59335 6.25998C9.43391 6.41998 9.23613 6.49998 9.00002 6.49998C8.76391 6.49998 8.56613 6.41998 8.40669 6.25998C8.24724 6.09998 8.16724 5.9022 8.16669 5.66665C8.16613 5.43109 8.24613 5.23304 8.40669 5.07248C8.56724 4.91192 8.76502 4.8322 9.00002 4.83331ZM8.16669 8.16665H9.83335V13.1666H8.16669V8.16665ZM9.00002 0.666645C7.84724 0.666645 6.76391 0.885534 5.75002 1.32331C4.73613 1.76109 3.85419 2.3547 3.10419 3.10415C2.35419 3.85359 1.76058 4.73553 1.32335 5.74998C0.886133 6.76442 0.667244 7.84776 0.666688 8.99998C0.666133 10.1522 0.885021 11.2355 1.32335 12.25C1.76169 13.2644 2.3553 14.1464 3.10419 14.8958C3.85308 15.6453 4.73502 16.2389 5.75002 16.6766C6.76502 17.1144 7.84835 17.3333 9.00002 17.3333C10.1517 17.3333 11.235 17.1144 12.25 16.6766C13.265 16.2389 14.147 15.6453 14.8959 14.8958C15.6447 14.1464 16.2386 13.2644 16.6775 12.25C17.1164 11.2355 17.335 10.1522 17.3334 8.99998C17.3317 7.84776 17.1128 6.76442 16.6767 5.74998C16.2406 4.73553 15.647 3.85359 14.8959 3.10415C14.1447 2.3547 13.2628 1.76081 12.25 1.32248C11.2372 0.884146 10.1539 0.665535 9.00002 0.666645Z" fill="#75E1FF" />
      </svg>
    );

    else if (variant === "error") return (
      <svg className="w-4.5" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12.4519 0.666687H5.54817L0.666687 5.54817V12.4519L5.54817 17.3334H12.4519L17.3334 12.4519V5.54817L12.4519 0.666687ZM9.92595 13.6297H8.07409V11.7778H9.92595V13.6297ZM9.92595 9.92595H8.07409V4.37039H9.92595V9.92595Z" fill="#FF7585" />
      </svg>
    );

    else if (variant === "warning") return (
      <svg className="w-4.5" viewBox="0 0 18 15" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M0.666687 14.6667H17.3334L9.00002 0.5L0.666687 14.6667ZM9.7576 12.4298H8.24244V10.9386H9.7576V12.4298ZM9.7576 9.44737H8.24244V6.46491H9.7576V9.44737Z" fill="#FFC175" />
      </svg>
    );

    else return (
      <svg
        className="w-4.5"
        viewBox="0 0 12 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
        <path d="M9.75 10.5433V15.6298C9.75001 15.6953 9.73242 15.7596 9.69902 15.8162C9.66563 15.8728 9.61761 15.9196 9.55989 15.9519C9.50217 15.9842 9.43679 16.0008 9.37045 16C9.30411 15.9992 9.23916 15.981 9.18225 15.9474L6 14.0628L2.81775 15.9474C2.76078 15.9811 2.69577 15.9992 2.62936 16C2.56295 16.0007 2.49753 15.9841 2.43978 15.9517C2.38204 15.9193 2.33404 15.8724 2.30069 15.8157C2.26735 15.759 2.24985 15.6946 2.25 15.6291V10.544C1.27961 9.77722 0.574494 8.73192 0.232094 7.55254C-0.110306 6.37317 -0.0730831 5.11795 0.338618 3.96036C0.75032 2.80277 1.51617 1.79995 2.53034 1.0905C3.5445 0.381054 4.75691 0 6 0C7.24309 0 8.4555 0.381054 9.46966 1.0905C10.4838 1.79995 11.2497 2.80277 11.6614 3.96036C12.0731 5.11795 12.1103 6.37317 11.7679 7.55254C11.4255 8.73192 10.7204 9.77722 9.75 10.544M6 10.3619C7.19347 10.3619 8.33807 9.894 9.18198 9.06113C10.0259 8.22825 10.5 7.09863 10.5 5.92077C10.5 4.74291 10.0259 3.61329 9.18198 2.78041C8.33807 1.94754 7.19347 1.47964 6 1.47964C4.80653 1.47964 3.66193 1.94754 2.81802 2.78041C1.97411 3.61329 1.5 4.74291 1.5 5.92077C1.5 7.09863 1.97411 8.22825 2.81802 9.06113C3.66193 9.894 4.80653 10.3619 6 10.3619ZM6 8.88153C5.20435 8.88153 4.44129 8.56959 3.87868 8.01434C3.31607 7.45909 3 6.70601 3 5.92077C3 5.13553 3.31607 4.38245 3.87868 3.8272C4.44129 3.27195 5.20435 2.96001 6 2.96001C6.79565 2.96001 7.55871 3.27195 8.12132 3.8272C8.68393 4.38245 9 5.13553 9 5.92077C9 6.70601 8.68393 7.45909 8.12132 8.01434C7.55871 8.56959 6.79565 8.88153 6 8.88153Z" fill="#868691" />
      </svg>
    );

  };

  return (
    <div
      className={cn(
        "border-[1.4px] rounded-sm py-2 px-3 flex items-start gap-3",
        variant === 'default' && "",
        variant === 'success' && "border-su_positive_week bg-su_positive_bg",
        variant === 'info' && "border-su_info_week bg-su_info_bg",
        variant === 'error' && "border-su_negative_week bg-su_negative_bg",
        variant === 'warning' && "border-su_warning_week bg-su_warning_bg",
        className
      )}
      {...props}
    >
      <div className="pt-1" >
        {icon ? icon : getDefaultIcon()}
      </div>

      <div className="w-full space-y-1" >
        <h2 className="test-sm lg:text-base text-primary font-semibold text-text dark:text-su_primary flex justify-between items-center" >
          {title}

          {
            !hideCloseButton &&

            <span
              className="cursor-pointer hover:bg-su_active_bg rounded-full p-1"
              onClick={onClose ? onClose : () => { }}
            >
              <svg className="w-3" viewBox="0 0 12 12" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" clipRule="evenodd" d="M10.058 11.1187L10.5883 11.649L11.649 10.5883L11.1186 10.058L7.06049 5.99982L11.1185 1.94173L11.6489 1.41139L10.5882 0.350739L10.0579 0.881072L5.99983 4.93915L1.94179 0.881071L1.41146 0.350739L0.350798 1.41139L0.881126 1.94173L4.93918 5.99982L0.881036 10.058L0.350708 10.5883L1.41137 11.649L1.9417 11.1187L5.99983 7.06048L10.058 11.1187Z" fill="white" />
              </svg>
            </span>
          }
        </h2>

        <div>
          <p className="text-xs lg:text-sm font-normal dark:text-su_secondary" >{subtitle}</p>
          <p
            className={cn(
              "text-xs lg:text-sm font-normal dark:text-su_secondary",
              descriptionClasses
            )}
          >
            {description}
          </p>
        </div>
      </div>
    </div >
  );
};

export default ToastLookCard;